#pragma OPENCL EXTENSION cl_amd_printf : enable

typedef float float_tt;
//typedef double float_tt;

float_tt sigmod(float_tt in){
    return 1.0 / (1.0 + exp(-in));
}

// Approximate one to avoid use of the exponential function
// which generates unsupported instructions on multi2sim
float_tt sigmod2(float_tt value) 
{ 
	float_tt x = (value < 0)? -value:value;
	float_tt x2 = x*x;
	float_tt e = 1.0f + x + x2*0.555f + x2*x2*0.143f;
	return 1.0f / (1.0f + (value > 0 ? 1.0f / e : e));
} 

__kernel void forward_parallel(
    __global float_tt* input_buf,
    __global float_tt* weight_buf,
    __global float_tt* b_buf,
    __global float_tt* output_buf,
    int in_width,
    int in_height,
    int in_depth,
    int out_width,
    int out_height,
    int out_depth,
    int kernel_size) {

	int id0 = (int)get_global_id(0);
	int id1 = (int)get_global_id(1);

    if(id0>=out_depth*out_width) return;
    if(id1>=out_height) return;

    int out = get_global_id(0) / out_width;
    int w_index = get_global_id(0) % out_width;
    int h_index = get_global_id(1);

    int out_index = out*out_width*out_height + h_index*out_width + w_index;
    int b_index   = out_index;

	float_tt sum;
	sum = b_buf[b_index];
    int size = kernel_size*kernel_size;

    for (unsigned int in=0; in < in_depth; in++) {
        float_tt weight_buf_sub[25]; // Set by brute force, NEED to be changed
        float_tt input_buf_sub[25]; // Set by brute force, NEED to be changed
        // load input and weight for this sub area
        for (unsigned int y = 0; y < kernel_size; y++){
            for (unsigned int x = 0; x < kernel_size; x++){
                input_buf_sub[y*kernel_size + x] = input_buf[in * (in_width * in_height) + (h_index + y) * in_width + x + w_index];
                weight_buf_sub[y*kernel_size + x] = weight_buf[in * out_depth * size + out * size + y*kernel_size + x ];
            }
        }
        
        // compute the convolution
        for (unsigned int i=0; i<25; i++) {
            sum += input_buf_sub[i] * weight_buf_sub[25 - i -1];
        }
    } 

    //output_buf[out_index] = sigmod(sum);
    output_buf[out_index] = sigmod2(sum);
}

__kernel void forward_batch(
    __global float_tt* input_batch_buf,
    __global float_tt* weight_buf,
    __global float_tt* b_buf,
    __global float_tt* output_batch_buf,
    int in_width,
    int in_height,
    int in_depth,
    int out_width,
    int out_height,
    int out_depth,
    int kernel_size,
    int batch_size) {

    if(get_global_id(0)>out_depth*out_width) return;
    if(get_global_id(1)>out_height*batch_size) return;

    int batch = get_global_id(1) / out_height;
    int out = get_global_id(0) / out_width;
    int w_index = get_global_id(0) % out_width;
    int h_index = get_global_id(1) % out_height;
    

    float_tt sum = 0;
    int size = kernel_size*kernel_size;
    
//	printf("test\n");

    for (unsigned int in=0; in < in_depth; in++) {
        float_tt weight_buf_sub[25]; // Set by brute force, NEED to be changed
        float_tt input_buf_sub[25]; // Set by brute force, NEED to be changed
        // load input and weight for this sub area
        for (unsigned int y = 0; y < kernel_size; y++){
            for (unsigned int x = 0; x < kernel_size; x++){
                input_buf_sub[y*kernel_size + x] = input_batch_buf[batch*in_depth*in_width*in_height
                                                                    + in * (in_width * in_height) 
                                                                    + (h_index + y) * in_width + x + w_index];
                weight_buf_sub[y*kernel_size + x] = weight_buf[in * out_depth * size 
                                                                    + out * size + y*kernel_size + x ];
            }
        }
        
        // compute the convolution
        for (unsigned int i=0; i<size; i++) {
            sum += input_buf_sub[i] * weight_buf_sub[size - i -1];
        }
    } 

    unsigned int out_index = batch*out_depth*out_width*out_height + out*out_width*out_height + h_index*out_width + w_index;
    unsigned int b_index   = out*out_width*out_height + h_index*out_width + w_index;
    output_batch_buf[out_index] = sigmod(sum + b_buf[b_index]);
}



#define THREAD_TASKS 4
__kernel void forward_batch_more(
    __global float_tt* input_batch_buf,
    __global float_tt* weight_buf,
    __global float_tt* b_buf,
    __global float_tt* output_batch_buf,
    int in_width,
    int in_height,
    int in_depth,
    int out_width,
    int out_height,
    int out_depth,
    int kernel_size,
    int batch_size) {

    int task_start = get_global_id(1) / out_height * THREAD_TASKS; // included
    int task_end = min(task_start+THREAD_TASKS, batch_size); // excluded
    int out = get_global_id(0) / out_width;
    int h_index = get_global_id(1) % out_height;
    int w_index = get_global_id(0) % out_width;


//	printf("test1\n");
    if(get_global_id(0)>out_depth*out_width) return;
    if(get_global_id(1)>((batch_size+THREAD_TASKS-1)/THREAD_TASKS*out_height)) return;

      
    int size = kernel_size*kernel_size;
    float_tt sum[THREAD_TASKS];
    int i=0;
    // initialize sum
    while(i<THREAD_TASKS){
        sum[i] = 0;
        i++;
    }
    

    for (unsigned int in=0; in < in_depth; in++) {
        float_tt weight_buf_sub[25]; // Set by brute force, NEED to be changed
        
        // load weight for this sub area
        for (unsigned int y = 0; y < kernel_size; y++){
            for (unsigned int x = 0; x < kernel_size; x++){
                weight_buf_sub[y*kernel_size + x] = weight_buf[in * out_depth * size 
                                                                    + out * size + y*kernel_size + x ];
            }
        }

        // for each task, load their own inputs and compute convolutions while using the shared weights
        for (unsigned int task=task_start; task<task_end; task++) {
            for (unsigned int y = 0; y < kernel_size; y++){
                for (unsigned int x = 0; x < kernel_size; x++){
                    // input_buf_sub[y*kernel_size + x] 
                    float_tt input_buf_ele = input_batch_buf[task*in_depth*in_width*in_height
                                                                        + in * (in_width * in_height) 
                                                                        + (h_index + y) * in_width + x + w_index];
                    // compute the convolution
                    sum[task%THREAD_TASKS] += input_buf_ele * weight_buf_sub[size-1 - y*kernel_size - x]; // symmetrical
                }
            }
        }
    } 

    // write back the results for each task
    for (unsigned int task=task_start; task<task_end; task++) {
        unsigned int out_index = task*out_depth*out_width*out_height + out*out_width*out_height + h_index*out_width + w_index;
        unsigned int b_index   = out*out_width*out_height + h_index*out_width + w_index;
        output_batch_buf[out_index] = sigmod(sum[task%THREAD_TASKS] + b_buf[b_index]);
    }  
}

